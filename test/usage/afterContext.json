{
    "_args": {
        "_": [],
        "help": false,
        "archive": "./commodity-network.bna",
        "a": "./commodity-network.bna",
        "outdir": "./out",
        "o": "./out",
        "config": "./config.yaml",
        "c": "./config.yaml",
        "$0": "../../bin/opus",
        "debug": true
    },
    "_meta": {},
    "_processtree": {
        "_nodeid": "root",
        "_desc": "root node that defines common data for all nodes",
        "processor": "root",
        "meta": {
            "outputdir": "./out",
            "templateroot": "_template",
            "tempdir": "_tmp"
        },
        "_sub": [
            {
                "_nodeid": "ParseNetwork",
                "_notes": "Uses the network to setup the context",
                "processor": "composernetwork",
                "meta": {
                    "archive": "./commodity-network.bna",
                    "parent": "root"
                },
                "_sub": null
            },
            {
                "_nodeid": "CreateMarkdown",
                "_notes": "Uses multiple templates specified in 'inputdir' & 'pattern' to work on the context and produce output",
                "processor": "njk_multi",
                "meta": {
                    "inputdir": "phase1-markdown",
                    "pattern": "**/*.njk",
                    "outputextension": ".md",
                    "outputdir": "_tmp",
                    "parent": "root"
                }
            },
            {
                "_nodeid": "HTML",
                "_notes": "From the markdown files that are created previously generate html",
                "processor": "stream",
                "meta": {
                    "inputdir": "_tmp",
                    "pattern": "**/*.md",
                    "outputdir": "./out",
                    "parent": "root"
                },
                "_sub": [
                    {
                        "_nodeid": "markdownhtml",
                        "_notes": "For each markdown file, this will convert into html and pass on the details via the stream",
                        "processor": "markdownit",
                        "meta": {
                            "k": "v",
                            "parent": "HTML"
                        }
                    },
                    {
                        "_nodeid": "htmlrender",
                        "_notes": "Single template to be used to process files via stream along with the context",
                        "processor": "njk_single",
                        "meta": {
                            "inputdir": "phase2-html",
                            "template": "html.default.njk",
                            "extension": ".html",
                            "parent": "HTML"
                        }
                    }
                ]
            },
            {
                "_nodeid": "FinalStep",
                "_notes": "Need to copy the fixed assets to the output directory ",
                "processor": "copy",
                "meta": {
                    "srcdir": "_template/assets.default/**/*",
                    "destdir": "./out/assets",
                    "parent": "root"
                }
            }
        ]
    },
    "ParseNetwork": {
        "archive": "./commodity-network.bna",
        "parent": "root"
    },
    "CreateMarkdown": {
        "inputdir": "phase1-markdown",
        "pattern": "**/*.njk",
        "outputextension": ".md",
        "outputdir": "_tmp",
        "parent": "root"
    },
    "markdownhtml": {
        "k": "v",
        "parent": "HTML"
    },
    "htmlrender": {
        "inputdir": "phase2-html",
        "template": "html.default.njk",
        "extension": ".html",
        "parent": "HTML"
    },
    "HTML": {
        "inputdir": "_tmp",
        "pattern": "**/*.md",
        "outputdir": "./out",
        "parent": "root"
    },
    "FinalStep": {
        "srcdir": "_template/assets.default/**/*",
        "destdir": "./out/assets",
        "parent": "root"
    },
    "root": {
        "outputdir": "./out",
        "templateroot": "_template",
        "tempdir": "_tmp"
    },
    "types": {
        "asset": [
            {
                "fqn": "org.acme.trading.SampleAsset",
                "name": "SampleAsset",
                "description": "An asset named SampleAsset",
                "type": "asset",
                "properties": {
                    "assetId": {
                        "type": "string",
                        "description": "The instance identifier for this type"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "decorators": {
                    "doc": [
                        "this is an asset"
                    ],
                    "docuri": [
                        "./doc.md"
                    ]
                }
            },
            {
                "fqn": "org.acme.trading.Commodity",
                "name": "Commodity",
                "description": "An asset named Commodity",
                "type": "asset",
                "properties": {
                    "tradingSymbol": {
                        "type": "string",
                        "description": "The instance identifier for this type"
                    },
                    "description": {
                        "type": "string"
                    },
                    "mainExchange": {
                        "type": "string"
                    },
                    "quantity": {
                        "type": "number"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The identifier of an instance of org.acme.trading.Trader"
                    }
                },
                "decorators": {}
            },
            {
                "fqn": "org.acme.trading.AnotherCommodity",
                "name": "AnotherCommodity",
                "description": "An asset named AnotherCommodity",
                "type": "asset",
                "properties": {
                    "tradingSymbol": {
                        "type": "string",
                        "description": "The instance identifier for this type"
                    },
                    "description": {
                        "type": "string"
                    },
                    "mainExchange": {
                        "type": "string"
                    },
                    "quantity": {
                        "type": "number"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The identifier of an instance of org.acme.trading.Trader"
                    }
                },
                "decorators": {}
            }
        ],
        "transaction": [
            {
                "fqn": "org.acme.trading.Trade",
                "name": "Trade",
                "description": "A transaction named Trade",
                "type": "transaction",
                "properties": {
                    "commodity": {
                        "type": "string",
                        "description": "The identifier of an instance of org.acme.trading.Commodity"
                    },
                    "newOwner": {
                        "type": "string",
                        "description": "The identifier of an instance of org.acme.trading.Trader"
                    },
                    "transactionId": {
                        "type": "string",
                        "description": "The instance identifier for this type"
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "decorators": {}
            },
            {
                "fqn": "org.acme.trading.TraderById",
                "name": "TraderById",
                "description": "A transaction named TraderById",
                "type": "transaction",
                "properties": {
                    "tradeId": {
                        "type": "string"
                    },
                    "tradingSymbol": {
                        "type": "string"
                    },
                    "qty": {
                        "type": "number"
                    },
                    "transactionId": {
                        "type": "string",
                        "description": "The instance identifier for this type"
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "decorators": {}
            },
            {
                "fqn": "org.acme.trading.BulkTrade",
                "name": "BulkTrade",
                "description": "A transaction named BulkTrade",
                "type": "transaction",
                "properties": {
                    "commodity": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "The identifier of an instance of org.acme.trading.Commodity"
                        }
                    },
                    "newOwner": {
                        "type": "string",
                        "description": "The identifier of an instance of org.acme.trading.Trader"
                    },
                    "transactionId": {
                        "type": "string",
                        "description": "The instance identifier for this type"
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "decorators": {}
            },
            {
                "fqn": "org.acme.trading.RemoveHighQuantityCommodities",
                "name": "RemoveHighQuantityCommodities",
                "description": "A transaction named RemoveHighQuantityCommodities",
                "type": "transaction",
                "properties": {
                    "transactionId": {
                        "type": "string",
                        "description": "The instance identifier for this type"
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "decorators": {}
            },
            {
                "fqn": "org.acme.trading._demoSetup",
                "name": "_demoSetup",
                "description": "A transaction named _demoSetup",
                "type": "transaction",
                "properties": {
                    "transactionId": {
                        "type": "string",
                        "description": "The instance identifier for this type"
                    },
                    "timestamp": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "decorators": {}
            }
        ],
        "concept": [],
        "enum": [],
        "participant": [
            {
                "fqn": "org.acme.trading.Trader",
                "name": "Trader",
                "description": "An participant named Trader",
                "type": "participant",
                "properties": {
                    "tradeId": {
                        "type": "string",
                        "description": "The instance identifier for this type"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    }
                },
                "decorators": {}
            },
            {
                "fqn": "org.acme.trading.Regulator",
                "name": "Regulator",
                "description": "An participant named Regulator",
                "type": "participant",
                "properties": {
                    "regId": {
                        "type": "string",
                        "description": "The instance identifier for this type"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "office": {
                        "type": "string"
                    }
                },
                "decorators": {
                    "doc": [
                        "Commoidity identified by the trading tradingSymbol"
                    ]
                }
            }
        ]
    },
    "scripts": {
        "files": [
            {
                "identifier": "lib/logic.js",
                "name": "lib/logic.js",
                "functions": [
                    {
                        "text": "function tradeCommodity(trade) {\n\n    // set the new owner of the commodity\n    trade.commodity.owner = trade.newOwner;\n    return getAssetRegistry('org.acme.trading.Commodity')\n        .then(function (assetRegistry) {\n\n            // emit a notification that a trade has occurred\n            var tradeNotification = getFactory().newEvent('org.acme.trading', 'TradeNotification');\n            tradeNotification.commodity = trade.commodity;\n            emit(tradeNotification);\n\n            // persist the state of the commodity\n            return assetRegistry.update(trade.commodity);\n        });\n}",
                        "name": "tradeCommodity",
                        "paramaterNames": [
                            "trade"
                        ],
                        "paramaterTypes": [
                            "org.acme.trading.Trade"
                        ]
                    },
                    {
                        "text": "function TradeById(tradeById){\n    var commodityRegistry;\n    return getAssetRegistry('org.acme.trading.Commodity')\n    .then(function(registry){\n        commodityRegistry=registry;\n        return commodityRegistry.get(tradeById.tradingSymbol);\n    })\n    .then(function(result){\n        result.quantity-=tradeById.qty;\n        return commodityRegistry.update(result);\n    });\n\n}",
                        "name": "TradeById",
                        "paramaterNames": [
                            "tradeById"
                        ],
                        "paramaterTypes": [
                            "org.acme.trading.TraderById"
                        ]
                    },
                    {
                        "text": "function removeHighQuantityCommodities(remove) {\n\n    return getAssetRegistry('org.acme.trading.Commodity')\n        .then(function (assetRegistry) {\n            return query('selectCommoditiesWithHighQuantity')\n                    .then(function (results) {\n\n                        var promises = [];\n\n                        for (var n = 0; n < results.length; n++) {\n                            var trade = results[n];\n\n                            // emit a notification that a trade was removed\n                            var removeNotification = getFactory().newEvent('org.acme.trading', 'RemoveNotification');\n                            removeNotification.commodity = trade;\n                            emit(removeNotification);\n\n                            // remove the commodity\n                            promises.push(assetRegistry.remove(trade));\n                        }\n\n                        // we have to return all the promises\n                        return Promise.all(promises);\n                    });\n        });\n}",
                        "name": "removeHighQuantityCommodities",
                        "paramaterNames": [
                            "remove"
                        ],
                        "paramaterTypes": [
                            "org.acme.trading.RemoveHighQuantityCommodities"
                        ]
                    },
                    {
                        "text": "function setup(){\n    var factory = getFactory();\n \tvar NS = 'org.acme.trading';\n    var traders = [\n      factory.newResource(NS,'Trader','CAROLINE'),\n      factory.newResource(NS,'Trader','TRACY'),\n      factory.newResource(NS,'Trader','TOM'),\n      factory.newResource(NS,'Trader','WHOLESALER')\n    ];\n    \n                          \n    var commodities = [\n      factory.newResource(NS,'Commodity','Ag'),\n      factory.newResource(NS,'Commodity','Pb'),\n      factory.newResource(NS,'Commodity','Fe'),\n      factory.newResource(NS,'Commodity','Cu')\n      ];\n \n    /* add the resource and the traders */\n    return getParticipantRegistry(NS+'.Trader')\n  .then(function(traderRegistry){\n            traders.forEach(function(trader) {\n         \n          trader.firstName = trader.getIdentifier().toLowerCase();\n          trader.lastName = 'Trader';\n      });\n      return traderRegistry.addAll(traders);\n    })\n  .then(function(){\n    \treturn getAssetRegistry(NS+'.Commodity');\n    })\n  .then(function(assetRegistry){\n      var qty=5;\n      commodities.forEach(function(commodity) {\n        commodity.description='A lot of '+commodity.getIdentifier();\n        commodity.mainExchange='Hursley';\n        commodity.quantity = (qty);\n        commodity.owner = factory.newRelationship(NS,'Trader','WHOLESALER');\n        qty+=10;\n      })\n      return assetRegistry.addAll(commodities);\n    });\n  \n}",
                        "name": "setup",
                        "paramaterNames": [],
                        "paramaterTypes": [
                            "org.acme.trading._demoSetup"
                        ]
                    }
                ]
            }
        ]
    },
    "acls": {
        "rules": [
            {
                "description": "Allow traders to see the assets that are for sale",
                "name": "Wholesaler",
                "verb": [
                    "READ",
                    "UPDATE"
                ],
                "noun": "org.acme.trading.Commodity",
                "participant": "ModelBinding org.acme.trading.Trader",
                "transaction": null,
                "predicate": "v.owner.getIdentifier() == 'WHOLESALER'",
                "action": "ALLOW"
            },
            {
                "description": "System ACL to permit all access",
                "name": "Allnetwork",
                "verb": [
                    "ALL"
                ],
                "noun": "org.acme.trading.**",
                "participant": "ModelBinding org.hyperledger.composer.system.Participant",
                "transaction": null,
                "predicate": "true",
                "action": "ALLOW"
            },
            {
                "description": "Allow traders to see the assets that they own",
                "name": "TradersAssets",
                "verb": [
                    "ALL"
                ],
                "noun": "org.acme.trading.Commodity",
                "participant": "ModelBinding org.acme.trading.Trader:t",
                "transaction": null,
                "predicate": "v.owner.getIdentifier() != t.getIdentifier()",
                "action": "DENY"
            },
            {
                "description": "Make the commodities themselves visible",
                "name": "CommoditiesView",
                "verb": [
                    "ALL"
                ],
                "noun": "org.acme.trading.Commodity",
                "participant": "ModelBinding org.acme.trading.Trader",
                "transaction": null,
                "predicate": "true",
                "action": "ALLOW"
            },
            {
                "description": "Allow traders to submit trades",
                "name": "MakeTrades_1",
                "verb": [
                    "ALL"
                ],
                "noun": "org.acme.trading.Trade",
                "participant": "ModelBinding org.acme.trading.Trader",
                "transaction": null,
                "predicate": "true",
                "action": "ALLOW"
            },
            {
                "description": "Allow traders to submit trades",
                "name": "MakeTrades_2",
                "verb": [
                    "ALL"
                ],
                "noun": "org.acme.trading.BulkTrade",
                "participant": "ModelBinding org.acme.trading.Trader",
                "transaction": null,
                "predicate": "true",
                "action": "ALLOW"
            },
            {
                "description": "Allow traders to submit trades",
                "name": "MakeTrades_3",
                "verb": [
                    "ALL"
                ],
                "noun": "org.acme.trading.TraderById",
                "participant": "ModelBinding org.acme.trading.Trader",
                "transaction": null,
                "predicate": "true",
                "action": "ALLOW"
            },
            {
                "description": "Trader can see their own participant",
                "name": "TraderSeeThemselves",
                "verb": [
                    "ALL"
                ],
                "noun": "org.acme.trading.Trader",
                "participant": "ModelBinding org.acme.trading.Trader:t",
                "transaction": null,
                "predicate": "v.getIdentifier() == t.getIdentifier()",
                "action": "ALLOW"
            },
            {
                "description": "Regulator can see all the trading assets etc. ",
                "name": "Regulator",
                "verb": [
                    "ALL"
                ],
                "noun": "org.acme.trading.**",
                "participant": "ModelBinding org.acme.trading.Regulator",
                "transaction": null,
                "predicate": "true",
                "action": "ALLOW"
            },
            {
                "description": "Traders should be able to see the history of the own transactions",
                "name": "TradersSeeOwnTransactions",
                "verb": [
                    "READ"
                ],
                "noun": "org.hyperledger.composer.system.HistorianRecord",
                "participant": "ModelBinding org.acme.trading.Trader:t",
                "transaction": null,
                "predicate": "v.participantInvoking.getIdentifier() == t.getIdentifier()",
                "action": "ALLOW"
            },
            {
                "description": "Traders can't see the record of what has happened in the business network",
                "name": "DenyHistorian",
                "verb": [
                    "READ",
                    "UPDATE",
                    "DELETE"
                ],
                "noun": "org.hyperledger.composer.system.HistorianRecord",
                "participant": "ModelBinding org.acme.trading.Trader",
                "transaction": null,
                "predicate": "true",
                "action": "DENY"
            },
            {
                "description": "System ACL to permit all access",
                "name": "NetworkUpdate",
                "verb": [
                    "READ"
                ],
                "noun": "org.hyperledger.composer.system.Network",
                "participant": "ModelBinding org.acme.trading.Trader",
                "transaction": null,
                "predicate": "true",
                "action": "ALLOW"
            },
            {
                "description": "System ACL to permit all access",
                "name": "SystemACL",
                "verb": [
                    "ALL"
                ],
                "noun": "org.hyperledger.composer.system.**",
                "participant": "ModelBinding org.hyperledger.composer.system.Participant",
                "transaction": null,
                "predicate": "true",
                "action": "ALLOW"
            }
        ]
    },
    "queries": [
        {
            "description": "Select all commodities",
            "name": "selectCommodities",
            "selector": "SELECT org.acme.trading.Commodity\n"
        },
        {
            "description": "Select all commodities based on their main exchange",
            "name": "selectCommoditiesByExchange",
            "selector": "SELECT org.acme.trading.Commodity\n          WHERE (mainExchange==_$exchange)\n"
        },
        {
            "description": "Select all commodities based on their owner",
            "name": "selectCommoditiesByOwner",
            "selector": "SELECT org.acme.trading.Commodity\n          WHERE (owner == _$owner)\n"
        },
        {
            "description": "Select commodities based on quantity",
            "name": "selectCommoditiesWithHighQuantity",
            "selector": "SELECT org.acme.trading.Commodity\n          WHERE (quantity > 60)\n"
        }
    ],
    "core": {
        "name": "metal-commodity-network",
        "version": "0.1.7",
        "readme": "# Commodity Network\n\n> This Business Network illustrates commodity trading.\n\nThis business network defines:\n\n**Participant**\n`Regulator`\n\n**Participant**\n`Trader`\n\n**Asset**\n`Commodity`\n\n**Transaction(s)**\n`Transaction`\n\n**Event**\n`TradeNotification `\n\nTo test this Business Network Definition in the **Test** tab:\n\nCreate two `Trader` participants:\n\n```\n{\n  \"$class\": \"org.acme.trading.Trader\",\n  \"tradeId\": \"TRADER1\",\n  \"firstName\": \"Jenny\",\n  \"lastName\": \"Jones\"\n}\n```\n\n```\n{\n  \"$class\": \"org.acme.trading.Trader\",\n  \"tradeId\": \"TRADER2\",\n  \"firstName\": \"Amy\",\n  \"lastName\": \"Williams\"\n}\n```\n\nCreate a `Commodity` asset:\n\n```\n{\n  \"$class\": \"org.acme.trading.Commodity\",\n  \"tradingSymbol\": \"ABC\",\n  \"description\": \"Test commodity\",\n  \"mainExchange\": \"Euronext\",\n  \"quantity\": 72.297,\n  \"owner\": \"resource:org.acme.trading.Trader#TRADER1\"\n}\n```\n\nSubmit a `Trade` transaction:\n\n```\n{\n  \"$class\": \"org.acme.trading.Trade\",\n  \"commodity\": \"resource:org.acme.trading.Commodity#ABC\",\n  \"newOwner\": \"resource:org.acme.trading.Trader#TRADER2\"\n}\n```\n\nAfter submitting this transaction, you should now see the transaction in the transaction registry. As a result, the owner of the commodity `ABC` should now be owned `TRADER2` in the Asset Registry.\n\nCongratulations!\n"
    },
    "undefined": {
        "stream": {
            "_readableState": {
                "objectMode": true,
                "highWaterMark": 16,
                "buffer": {
                    "head": null,
                    "tail": null,
                    "length": 0
                },
                "length": 0,
                "pipes": {
                    "domain": null,
                    "_events": {
                        "error": [
                            null,
                            null
                        ],
                        "close": [
                            null,
                            null,
                            null
                        ],
                        "end": [
                            null,
                            null
                        ]
                    },
                    "_eventsCount": 7,
                    "writable": true,
                    "readable": true
                },
                "pipesCount": 1,
                "flowing": true,
                "ended": false,
                "endEmitted": false,
                "reading": false,
                "sync": false,
                "needReadable": true,
                "emittedReadable": false,
                "readableListening": false,
                "resumeScheduled": true,
                "destroyed": false,
                "defaultEncoding": "utf8",
                "awaitDrain": 0,
                "readingMore": false,
                "decoder": null,
                "encoding": null
            },
            "readable": true,
            "domain": null,
            "_events": {
                "end": [
                    null,
                    null
                ]
            },
            "_eventsCount": 8,
            "_writableState": {
                "objectMode": true,
                "highWaterMark": 16,
                "finalCalled": false,
                "needDrain": false,
                "ending": false,
                "ended": false,
                "finished": false,
                "destroyed": false,
                "decodeStrings": true,
                "defaultEncoding": "utf8",
                "length": 0,
                "writing": false,
                "corked": 0,
                "sync": true,
                "bufferProcessing": false,
                "writecb": null,
                "writelen": 0,
                "bufferedRequest": null,
                "lastBufferedRequest": null,
                "pendingcb": 0,
                "prefinished": false,
                "errorEmitted": false,
                "bufferedRequestCount": 0,
                "corkedRequestsFree": {
                    "next": null,
                    "entry": null
                }
            },
            "writable": true,
            "allowHalfOpen": true,
            "_transformState": {
                "needTransform": false,
                "transforming": false,
                "writecb": null,
                "writechunk": null,
                "writeencoding": null
            },
            "_destroyed": false
        },
        "pipeElements": [
            null,
            null
        ]
    }
}
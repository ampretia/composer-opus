module.exports = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
    'use strict';

    function peg$subclass(child, parent) {
        function ctor() { this.constructor = child; }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
    }

    function peg$SyntaxError(message, expected, found, location) {
        this.message  = message;
        this.expected = expected;
        this.found    = found;
        this.location = location;
        this.name     = 'SyntaxError';

        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, peg$SyntaxError);
        }
    }

    peg$subclass(peg$SyntaxError, Error);

    peg$SyntaxError.buildMessage = function(expected, found) {
        let DESCRIBE_EXPECTATION_FNS = {
            literal: function(expectation) {
                return '"' + literalEscape(expectation.text) + '"';
            },

            'class': function(expectation) {
                let escapedParts = '',
                    i;

                for (i = 0; i < expectation.parts.length; i++) {
                    escapedParts += expectation.parts[i] instanceof Array
                        ? classEscape(expectation.parts[i][0]) + '-' + classEscape(expectation.parts[i][1])
                        : classEscape(expectation.parts[i]);
                }

                return '[' + (expectation.inverted ? '^' : '') + escapedParts + ']';
            },

            any: function(expectation) {
                return 'any character';
            },

            end: function(expectation) {
                return 'end of input';
            },

            other: function(expectation) {
                return expectation.description;
            }
        };

        function hex(ch) {
            return ch.charCodeAt(0).toString(16).toUpperCase();
        }

        function literalEscape(s) {
            return s
                .replace(/\\/g, '\\\\')
                .replace(/"/g,  '\\"')
                .replace(/\0/g, '\\0')
                .replace(/\t/g, '\\t')
                .replace(/\n/g, '\\n')
                .replace(/\r/g, '\\r')
                .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
                .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
        }

        function classEscape(s) {
            return s
                .replace(/\\/g, '\\\\')
                .replace(/\]/g, '\\]')
                .replace(/\^/g, '\\^')
                .replace(/-/g,  '\\-')
                .replace(/\0/g, '\\0')
                .replace(/\t/g, '\\t')
                .replace(/\n/g, '\\n')
                .replace(/\r/g, '\\r')
                .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
                .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
        }

        function describeExpectation(expectation) {
            return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
        }

        function describeExpected(expected) {
            let descriptions = new Array(expected.length),
                i, j;

            for (i = 0; i < expected.length; i++) {
                descriptions[i] = describeExpectation(expected[i]);
            }

            descriptions.sort();

            if (descriptions.length > 0) {
                for (i = 1, j = 1; i < descriptions.length; i++) {
                    if (descriptions[i - 1] !== descriptions[i]) {
                        descriptions[j] = descriptions[i];
                        j++;
                    }
                }
                descriptions.length = j;
            }

            switch (descriptions.length) {
            case 1:
                return descriptions[0];

            case 2:
                return descriptions[0] + ' or ' + descriptions[1];

            default:
                return descriptions.slice(0, -1).join(', ') +
            ', or ' +
            descriptions[descriptions.length - 1];
            }
        }

        function describeFound(found) {
            return found ? '"' + literalEscape(found) + '"' : 'end of input';
        }

        return 'Expected ' + describeExpected(expected) + ' but ' + describeFound(found) + ' found.';
    };

    function peg$parse(input, options) {
        options = options !== void 0 ? options : {};

        let peg$FAILED = {},

            peg$startRuleFunctions = { start: peg$parsestart },
            peg$startRuleFunction  = peg$parsestart,

            peg$c0 = function() {return functions;},
            peg$c1 = 'namespace',
            peg$c2 = peg$literalExpectation('namespace', false),
            peg$c3 = 'abstract',
            peg$c4 = peg$literalExpectation('abstract', false),
            peg$c5 = 'concept',
            peg$c6 = peg$literalExpectation('concept', false),
            peg$c7 = 'asset',
            peg$c8 = peg$literalExpectation('asset', false),
            peg$c9 = 'transaction',
            peg$c10 = peg$literalExpectation('transaction', false),
            peg$c11 = 'event',
            peg$c12 = peg$literalExpectation('event', false),
            peg$c13 = 'participant',
            peg$c14 = peg$literalExpectation('participant', false),
            peg$c15 = 'from',
            peg$c16 = peg$literalExpectation('from', false),
            peg$c17 = function(m, id) {functions[id] = m;},
            peg$c18 = 'function',
            peg$c19 = peg$literalExpectation('function', false),
            peg$c20 = function(id) {functions[id] = null;},
            peg$c21 = '/*',
            peg$c22 = peg$literalExpectation('/*', false),
            peg$c23 = function() {return buffer.match(/\*\//);},
            peg$c24 = peg$anyExpectation(),
            peg$c25 = function(c) {buffer += c;  },
            peg$c26 = function() {
                let temp = buffer;
                buffer = '';
                let temp2=f;
                f='';
                //return "/*" + temp.replace(/\s+/g, ' ');
                return temp; // this is the useful one
            },
            peg$c27 = '//',
            peg$c28 = peg$literalExpectation('//', false),
            peg$c29 = /^[^\r\n]/,
            peg$c30 = peg$classExpectation(['\r', '\n'], true, false),
            peg$c31 = /^[a-z]/,
            peg$c32 = peg$classExpectation([['a', 'z']], false, false),
            peg$c33 = /^[A-Z]/,
            peg$c34 = peg$classExpectation([['A', 'Z']], false, false),
            peg$c35 = '_',
            peg$c36 = peg$literalExpectation('_', false),
            peg$c37 = /^[0-9]/,
            peg$c38 = peg$classExpectation([['0', '9']], false, false),
            peg$c39 = function(a, b) {return a + b.join('');},
            peg$c40 = /^[ \t\r\n]/,
            peg$c41 = peg$classExpectation([' ', '\t', '\r', '\n'], false, false),
            peg$c42 = function() {return '';},
            peg$c43 = '"',
            peg$c44 = peg$literalExpectation('"', false),
            peg$c45 = '\\',
            peg$c46 = peg$literalExpectation('\\', false),
            peg$c47 = /^[^"]/,
            peg$c48 = peg$classExpectation(['"'], true, false),
            peg$c49 = '\'',
            peg$c50 = peg$literalExpectation('\'', false),
            peg$c51 = /^[^']/,
            peg$c52 = peg$classExpectation(['\''], true, false),
            peg$c53 = ',',
            peg$c54 = peg$literalExpectation(',', false),
            peg$c55 = '@docs',
            peg$c56 = peg$literalExpectation('@docs', false),
            peg$c57 = '(',
            peg$c58 = peg$literalExpectation('(', false),
            peg$c59 = ')',
            peg$c60 = peg$literalExpectation(')', false),
            peg$c61 = '@docsuri',
            peg$c62 = peg$literalExpectation('@docsuri', false),

            peg$currPos          = 0,
            peg$savedPos         = 0,
            peg$posDetailsCache  = [{ line: 1, column: 1 }],
            peg$maxFailPos       = 0,
            peg$maxFailExpected  = [],
            peg$silentFails      = 0,

            peg$result;

        if ('startRule' in options) {
            if (!(options.startRule in peg$startRuleFunctions)) {
                throw new Error('Can\'t start parsing from rule "' + options.startRule + '".');
            }

            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }

        function text() {
            return input.substring(peg$savedPos, peg$currPos);
        }

        function location() {
            return peg$computeLocation(peg$savedPos, peg$currPos);
        }

        function expected(description, location) {
            location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);

            throw peg$buildStructuredError(
                [peg$otherExpectation(description)],
                input.substring(peg$savedPos, peg$currPos),
                location
            );
        }

        function error(message, location) {
            location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);

            throw peg$buildSimpleError(message, location);
        }

        function peg$literalExpectation(text, ignoreCase) {
            return { type: 'literal', text: text, ignoreCase: ignoreCase };
        }

        function peg$classExpectation(parts, inverted, ignoreCase) {
            return { type: 'class', parts: parts, inverted: inverted, ignoreCase: ignoreCase };
        }

        function peg$anyExpectation() {
            return { type: 'any' };
        }

        function peg$endExpectation() {
            return { type: 'end' };
        }

        function peg$otherExpectation(description) {
            return { type: 'other', description: description };
        }

        function peg$computePosDetails(pos) {
            let details = peg$posDetailsCache[pos], p;

            if (details) {
                return details;
            } else {
                p = pos - 1;
                while (!peg$posDetailsCache[p]) {
                    p--;
                }

                details = peg$posDetailsCache[p];
                details = {
                    line:   details.line,
                    column: details.column
                };

                while (p < pos) {
                    if (input.charCodeAt(p) === 10) {
                        details.line++;
                        details.column = 1;
                    } else {
                        details.column++;
                    }

                    p++;
                }

                peg$posDetailsCache[pos] = details;
                return details;
            }
        }

        function peg$computeLocation(startPos, endPos) {
            let startPosDetails = peg$computePosDetails(startPos),
                endPosDetails   = peg$computePosDetails(endPos);

            return {
                start: {
                    offset: startPos,
                    line:   startPosDetails.line,
                    column: startPosDetails.column
                },
                end: {
                    offset: endPos,
                    line:   endPosDetails.line,
                    column: endPosDetails.column
                }
            };
        }

        function peg$fail(expected) {
            if (peg$currPos < peg$maxFailPos) { return; }

            if (peg$currPos > peg$maxFailPos) {
                peg$maxFailPos = peg$currPos;
                peg$maxFailExpected = [];
            }

            peg$maxFailExpected.push(expected);
        }

        function peg$buildSimpleError(message, location) {
            return new peg$SyntaxError(message, null, null, location);
        }

        function peg$buildStructuredError(expected, found, location) {
            return new peg$SyntaxError(
                peg$SyntaxError.buildMessage(expected, found),
                expected,
                found,
                location
            );
        }

        function peg$parsestart() {
            let s0, s1, s2;

            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseunit();
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parseunit();
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c0();
            }
            s0 = s1;

            return s0;
        }

        function peg$parseunit() {
            let s0;

            s0 = peg$parsefunc();
            if (s0 === peg$FAILED) {
                s0 = peg$parsestring();
                if (s0 === peg$FAILED) {
                    s0 = peg$parsemulti_line_comment();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parsesingle_line_comment();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parseany_char();
                        }
                    }
                }
            }

            return s0;
        }

        function peg$parseNamespaceToken() {
            let s0;

            if (input.substr(peg$currPos, 9) === peg$c1) {
                s0 = peg$c1;
                peg$currPos += 9;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c2); }
            }

            return s0;
        }

        function peg$parseAbstractToken() {
            let s0;

            if (input.substr(peg$currPos, 8) === peg$c3) {
                s0 = peg$c3;
                peg$currPos += 8;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c4); }
            }

            return s0;
        }

        function peg$parseConceptToken() {
            let s0;

            if (input.substr(peg$currPos, 7) === peg$c5) {
                s0 = peg$c5;
                peg$currPos += 7;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c6); }
            }

            return s0;
        }

        function peg$parseAssetToken() {
            let s0;

            if (input.substr(peg$currPos, 5) === peg$c7) {
                s0 = peg$c7;
                peg$currPos += 5;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c8); }
            }

            return s0;
        }

        function peg$parseTransactionToken() {
            let s0;

            if (input.substr(peg$currPos, 11) === peg$c9) {
                s0 = peg$c9;
                peg$currPos += 11;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c10); }
            }

            return s0;
        }

        function peg$parseEventToken() {
            let s0;

            if (input.substr(peg$currPos, 5) === peg$c11) {
                s0 = peg$c11;
                peg$currPos += 5;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c12); }
            }

            return s0;
        }

        function peg$parseParticipantToken() {
            let s0;

            if (input.substr(peg$currPos, 11) === peg$c13) {
                s0 = peg$c13;
                peg$currPos += 11;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }

            return s0;
        }

        function peg$parseFromToken() {
            let s0;

            if (input.substr(peg$currPos, 4) === peg$c15) {
                s0 = peg$c15;
                peg$currPos += 4;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c16); }
            }

            return s0;
        }

        function peg$parsetype() {
            let s0;

            if (input.substr(peg$currPos, 11) === peg$c9) {
                s0 = peg$c9;
                peg$currPos += 11;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c10); }
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c7) {
                    s0 = peg$c7;
                    peg$currPos += 5;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c8); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c11) {
                        s0 = peg$c11;
                        peg$currPos += 5;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c12); }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 7) === peg$c5) {
                            s0 = peg$c5;
                            peg$currPos += 7;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c6); }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 11) === peg$c13) {
                                s0 = peg$c13;
                                peg$currPos += 11;
                            } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c14); }
                            }
                        }
                    }
                }
            }

            return s0;
        }

        function peg$parsefunc() {
            let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

            s0 = peg$currPos;
            s1 = peg$parsemulti_line_comment();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsespaces();
                if (s2 === peg$FAILED) {
                    s2 = null;
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseDecorators();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsespaces();
                        if (s4 === peg$FAILED) {
                            s4 = null;
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseAbstractToken();
                            if (s5 === peg$FAILED) {
                                s5 = null;
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsespaces();
                                if (s6 === peg$FAILED) {
                                    s6 = null;
                                }
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parsetype();
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parsespaces();
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$parseidentifier();
                                            if (s9 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c17(s1, s9);
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 8) === peg$c18) {
                    s1 = peg$c18;
                    peg$currPos += 8;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c19); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsespaces();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseidentifier();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c20(s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }

            return s0;
        }

        function peg$parsemulti_line_comment() {
            let s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c21) {
                s1 = peg$c21;
                peg$currPos += 2;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c22); }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                peg$savedPos = peg$currPos;
                s4 = peg$c23();
                if (s4) {
                    s4 = peg$FAILED;
                } else {
                    s4 = void 0;
                }
                if (s4 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                        s5 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c24); }
                    }
                    if (s5 !== peg$FAILED) {
                        peg$savedPos = s3;
                        s4 = peg$c25(s5);
                        s3 = s4;
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    peg$savedPos = peg$currPos;
                    s4 = peg$c23();
                    if (s4) {
                        s4 = peg$FAILED;
                    } else {
                        s4 = void 0;
                    }
                    if (s4 !== peg$FAILED) {
                        if (input.length > peg$currPos) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c24); }
                        }
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s3;
                            s4 = peg$c25(s5);
                            s3 = s4;
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c26();
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }

            return s0;
        }

        function peg$parsesingle_line_comment() {
            let s0, s1, s2, s3;

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c27) {
                s1 = peg$c27;
                peg$currPos += 2;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c28); }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                if (peg$c29.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c30); }
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    if (peg$c29.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c30); }
                    }
                }
                if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }

            return s0;
        }

        function peg$parseidentifier() {
            let s0, s1, s2, s3;

            s0 = peg$currPos;
            if (peg$c31.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c32); }
            }
            if (s1 === peg$FAILED) {
                if (peg$c33.test(input.charAt(peg$currPos))) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c34); }
                }
                if (s1 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 95) {
                        s1 = peg$c35;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c36); }
                    }
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                if (peg$c31.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c32); }
                }
                if (s3 === peg$FAILED) {
                    if (peg$c33.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c34); }
                    }
                    if (s3 === peg$FAILED) {
                        if (peg$c37.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c38); }
                        }
                        if (s3 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 95) {
                                s3 = peg$c35;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c36); }
                            }
                        }
                    }
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    if (peg$c31.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c32); }
                    }
                    if (s3 === peg$FAILED) {
                        if (peg$c33.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c34); }
                        }
                        if (s3 === peg$FAILED) {
                            if (peg$c37.test(input.charAt(peg$currPos))) {
                                s3 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c38); }
                            }
                            if (s3 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 95) {
                                    s3 = peg$c35;
                                    peg$currPos++;
                                } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c36); }
                                }
                            }
                        }
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c39(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }

            return s0;
        }

        function peg$parsespaces() {
            let s0, s1, s2;

            s0 = peg$currPos;
            s1 = [];
            if (peg$c40.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c41); }
            }
            if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    if (peg$c40.test(input.charAt(peg$currPos))) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c41); }
                    }
                }
            } else {
                s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c42();
            }
            s0 = s1;

            return s0;
        }

        function peg$parsestring() {
            let s0, s1, s2, s3, s4, s5;

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 34) {
                s1 = peg$c43;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c44); }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 92) {
                    s4 = peg$c45;
                    peg$currPos++;
                } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c46); }
                }
                if (s4 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                        s5 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c24); }
                    }
                    if (s5 !== peg$FAILED) {
                        s4 = [s4, s5];
                        s3 = s4;
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
                if (s3 === peg$FAILED) {
                    if (peg$c47.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c48); }
                    }
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 92) {
                        s4 = peg$c45;
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c46); }
                    }
                    if (s4 !== peg$FAILED) {
                        if (input.length > peg$currPos) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c24); }
                        }
                        if (s5 !== peg$FAILED) {
                            s4 = [s4, s5];
                            s3 = s4;
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    if (s3 === peg$FAILED) {
                        if (peg$c47.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c48); }
                        }
                    }
                }
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 34) {
                        s3 = peg$c43;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c44); }
                    }
                    if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 39) {
                    s1 = peg$c49;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c50); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 92) {
                        s4 = peg$c45;
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c46); }
                    }
                    if (s4 !== peg$FAILED) {
                        if (input.length > peg$currPos) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c24); }
                        }
                        if (s5 !== peg$FAILED) {
                            s4 = [s4, s5];
                            s3 = s4;
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    if (s3 === peg$FAILED) {
                        if (peg$c51.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c52); }
                        }
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 92) {
                            s4 = peg$c45;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c46); }
                        }
                        if (s4 !== peg$FAILED) {
                            if (input.length > peg$currPos) {
                                s5 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c24); }
                            }
                            if (s5 !== peg$FAILED) {
                                s4 = [s4, s5];
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                        if (s3 === peg$FAILED) {
                            if (peg$c51.test(input.charAt(peg$currPos))) {
                                s3 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c52); }
                            }
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 39) {
                            s3 = peg$c49;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c50); }
                        }
                        if (s3 !== peg$FAILED) {
                            s1 = [s1, s2, s3];
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }

            return s0;
        }

        function peg$parseany_char() {
            let s0;

            if (input.length > peg$currPos) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c24); }
            }

            return s0;
        }

        function peg$parseDecoratorArgs() {
            let s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            s1 = [];
            s2 = peg$currPos;
            s3 = peg$parsestring();
            if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                    s4 = peg$c53;
                    peg$currPos++;
                } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c54); }
                }
                if (s4 !== peg$FAILED) {
                    s3 = [s3, s4];
                    s2 = s3;
                } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                }
            } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
            }
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$currPos;
                s3 = peg$parsestring();
                if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s4 = peg$c53;
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c54); }
                    }
                    if (s4 !== peg$FAILED) {
                        s3 = [s3, s4];
                        s2 = s3;
                    } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsestring();
                if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }

            return s0;
        }

        function peg$parseDecorator() {
            let s0, s1, s2, s3, s4;

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c55) {
                s1 = peg$c55;
                peg$currPos += 5;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c56); }
            }
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 40) {
                    s2 = peg$c57;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c58); }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseDecoratorArgs();
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                            s4 = peg$c59;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c60); }
                        }
                        if (s4 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4];
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 8) === peg$c61) {
                    s1 = peg$c61;
                    peg$currPos += 8;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c62); }
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s2 = peg$c57;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c58); }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseDecoratorArgs();
                        if (s3 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 41) {
                                s4 = peg$c59;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c60); }
                            }
                            if (s4 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4];
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }

            return s0;
        }

        function peg$parseDecorators() {
            let s0, s1, s2, s3;

            s0 = [];
            s1 = peg$currPos;
            s2 = peg$parseDecorator();
            if (s2 !== peg$FAILED) {
                s3 = peg$parsespaces();
                if (s3 !== peg$FAILED) {
                    s2 = [s2, s3];
                    s1 = s2;
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
            } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
            while (s1 !== peg$FAILED) {
                s0.push(s1);
                s1 = peg$currPos;
                s2 = peg$parseDecorator();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsespaces();
                    if (s3 !== peg$FAILED) {
                        s2 = [s2, s3];
                        s1 = s2;
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
            }

            return s0;
        }


        var functions = {};
        var buffer = '';
        var f='';


        peg$result = peg$startRuleFunction();

        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            return peg$result;
        } else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
                peg$fail(peg$endExpectation());
            }

            throw peg$buildStructuredError(
                peg$maxFailExpected,
                peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
                peg$maxFailPos < input.length
                    ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
                    : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
            );
        }
    }

    return {
        SyntaxError: peg$SyntaxError,
        parse:       peg$parse
    };
})();